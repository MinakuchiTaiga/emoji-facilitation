{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","copiedEmoji","className","onSelect","emoji","alert","JSON","stringify","console","log","native","setState","set","i18n","search","categories","recent","people","nature","foods","activity","places","objects","symbols","flags","custom","class","tag","options","this","prevProps","prevState","Class","copiedEmojiImg","document","getElementsByClassName","myrange","createRange","selectNode","window","getSelection","removeAllRanges","addRange","execCommand","copyImageByClassName","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qRA4IeA,E,kDAnIb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAACC,YAAa,gBAFV,E,qDAOT,IAAD,OAuBP,OACE,sBAAKC,UAAU,MAAf,UACE,gCACE,8CAEA,cAAC,IAAD,CACEC,SAAU,SAAAC,GAAK,OApBN,SAAAA,GAEfC,MAAMC,KAAKC,UAAUH,IACrBI,QAAQC,IAAIL,EAAMM,QAElB,EAAKC,SAAS,CAACV,YAAaG,EAAMM,SAeTP,CAASC,IAC5BQ,IAAI,UACJC,KAAM,CACJC,OAAQ,eACRC,WAAY,CACVD,OAAQ,2BACRE,OAAQ,6CACRC,OAAQ,kBACRC,OAAQ,8BACRC,MAAO,0CACPC,SAAU,6CACVC,OAAQ,8BACRC,QAAS,uCACTC,QAAS,eACTC,MAAO,SACPC,OAAQ,kCAOhB,gCACE,8CACA,qBAAKC,MAAM,YAAX,SACE,cAAC,IAAD,CAASC,IAAI,OAAOC,QAAS,CAAE1B,UAAW,gBAA1C,SAA6D2B,KAAK7B,MAAMC,wB,yCAW/D6B,EAAWC,IAGC,SAAAC,GAkC3B,IAAMC,EAAiBC,SAASC,uBAAuBH,GACvDxB,QAAQC,IAAIwB,EAAe,IAC3B,IAAIG,EAAUF,SAASG,cACvBD,EAAQE,WAAWL,EAAe,IAClCM,OAAOC,eAAeC,kBACtBF,OAAOC,eAAeE,SAASN,GAI/BF,SAASS,YAAY,QAErBJ,OAAOC,eAAeC,kBAKxBG,CAAqB,gBACrBpC,QAAQC,IAAIoB,KAAK7B,MAAMC,YAAc,mB,GAhIvB4C,IAAMC,WCKTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASyB,eAAe,SAM1BZ,M","file":"static/js/main.65e7556a.chunk.js","sourcesContent":["\nimport React, { useState } from 'react';\nimport './App.css';\nimport { Emoji, Picker } from 'emoji-mart';\nimport 'emoji-mart/css/emoji-mart.css';\nimport Twemoji from 'react-twemoji';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {copiedEmoji: '😀'}\n  };\n\n\n\n  render() {\n    \n\n    \n\n\n\n\n\n    const onSelect = emoji => {\n      //console.log({emoji});\n      alert(JSON.stringify(emoji));\n      console.log(emoji.native);\n\n      this.setState({copiedEmoji: emoji.native});\n\n\n      \n\n\n      \n    };\n\n    return (\n      <div className=\"App\">\n        <div>\n          <h1>emoji picker</h1>\n\n          <Picker\n            onSelect={emoji => onSelect(emoji)}\n            set=\"twitter\"\n            i18n={{\n              search: '検索',\n              categories: {\n                search: '検索結果',\n                recent: 'よく使う絵文字',\n                people: '顔 & 人',\n                nature: '動物 & 自然',\n                foods: '食べ物 & 飲み物',\n                activity: 'アクティビティ',\n                places: '旅行 & 場所',\n                objects: 'オブジェクト',\n                symbols: '記号',\n                flags: '旗',\n                custom: 'カスタム',\n              },\n            }}\n            \n          />\n        </div>\n\n        <div>\n          <h1>Copied emoji</h1>\n          <div class=\"emojiList\">\n            <Twemoji tag=\"span\" options={{ className: 'test-twemoji'}}>{ this.state.copiedEmoji }</Twemoji>\n          </div>\n        </div>\n\n      </div>\n    );\n\n    \n  }\n\n\n  componentDidUpdate(prevProps, prevState){\n    /* 再描画後に実際のDOMにアクセスするためのメソッド */\n\n    const copyImageByClassName = Class => {\n\n      /*\n      var imgs = document.createElement('img');\n      imgs.src = document.getElementsByClassName(Class).src;\n      \n      console.log(imgs.src);\n\n      var bodys = document.body ;\n      bodys.appendChild(imgs);\n\n      if (document.createRange)  \n      {\n        alert ('CreateRange work');\n        var myrange = document.createRange();\n        myrange.setStartBefore(imgs);\n        myrange.setEndAfter(imgs);\n        myrange.selectNode(imgs);\n\n      }\n      else\n      {\n        alert ('CreateRange NOT work');\n      }\n\n      var sel = window.getSelection();\n      sel.removeAllRanges();\n      sel.addRange(myrange);\n\n      document.execCommand(\"copy\");\n\n      //bodys.removeChild(imgs);\n      */\n\n      const copiedEmojiImg = document.getElementsByClassName(Class);\n      console.log(copiedEmojiImg[0]);\n      var myrange = document.createRange();\n      myrange.selectNode(copiedEmojiImg[0]);\n      window.getSelection().removeAllRanges();\n      window.getSelection().addRange(myrange);\n      //copiedEmojiImg.select();\n\n\n      document.execCommand(\"copy\");\n\n      window.getSelection().removeAllRanges();\n      \n    };\n\n\n    copyImageByClassName('test-twemoji');\n    console.log(this.state.copiedEmoji + \"copied now!\");\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}